{"expireTime":9007200819714571000,"key":"gatsby-plugin-mdx-entire-payload-d6a70cd76f9aca7c03cee8bdf32a0ead-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"One problem new JavaScript developers face is understanding that variables and functions are ‚Äúhoisted‚Äù. While some developers intend for hoisting to happen, others are faced with unexpected results and don‚Äôt understand why. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":225,"offset":225},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":225,"offset":225},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, what is hoisting? ","position":{"start":{"line":4,"column":1,"offset":227},"end":{"line":4,"column":26,"offset":252},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":227},"end":{"line":4,"column":26,"offset":252},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Outputs: undefined\nconsole.log(car);\nvar car = 'Audi';","position":{"start":{"line":5,"column":1,"offset":253},"end":{"line":9,"column":4,"offset":320},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Hoisting by definition is to ‚Äúraise or lift‚Äù and that‚Äôs exactly what JavaScript does when it runs our code. For example, JavaScript would have read our code snippet above as:","position":{"start":{"line":11,"column":1,"offset":322},"end":{"line":11,"column":175,"offset":496},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":322},"end":{"line":11,"column":175,"offset":496},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"var car;\n\n// Outputs: undefined\nconsole.log(car);\n\n// JavaScript sets our car variable afterwards\ncar = 'Audi';","position":{"start":{"line":12,"column":1,"offset":497},"end":{"line":20,"column":4,"offset":618},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see our variable car is declared at the top of our file with a value set to ‚Äúundefined‚Äù. Then once JavaScript gets to our variable it will reassign that variable to what we passed it.  ","position":{"start":{"line":21,"column":1,"offset":619},"end":{"line":21,"column":197,"offset":815},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":619},"end":{"line":21,"column":197,"offset":815},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You might be asking yourself, what about functions? Functions are hoisted as well, but with a catch. Unlike variables, functions actually hoist the whole function definition, but only if it‚Äôs a function declaration.  For function expressions, the variable itself is hoisted, but the actual function definition is not. ","position":{"start":{"line":23,"column":1,"offset":817},"end":{"line":23,"column":319,"offset":1135},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":817},"end":{"line":23,"column":319,"offset":1135},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Outputs: 'slyderz.co'\nsomeFunc() \n\nfunction someFunc() {\n\treturn 'slyderz.co'\n}\n\n\n// Outputs: site is undefined\nsite();\n\nvar site = function someFunc() {\n\treturn 'slyderz.co'\n}","position":{"start":{"line":25,"column":1,"offset":1137},"end":{"line":40,"column":4,"offset":1326},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's all for now üòÑ. ","position":{"start":{"line":42,"column":1,"offset":1328},"end":{"line":42,"column":24,"offset":1351},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1328},"end":{"line":42,"column":24,"offset":1351},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Understanding hoisting in JavaScript\",\"date\":\"2019-05-19\"}","position":{"start":{"line":46,"column":1,"offset":1355},"end":{"line":46,"column":97,"offset":1451},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":46,"column":97,"offset":1451}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Understanding hoisting in JavaScript\",\n  \"date\": \"2019-05-19\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One problem new JavaScript developers face is understanding that variables and functions are \\u201Choisted\\u201D. While some developers intend for hoisting to happen, others are faced with unexpected results and don\\u2019t understand why. \"), mdx(\"p\", null, \"First, what is hoisting? \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Outputs: undefined\\nconsole.log(car);\\nvar car = 'Audi';\\n\")), mdx(\"p\", null, \"Hoisting by definition is to \\u201Craise or lift\\u201D and that\\u2019s exactly what JavaScript does when it runs our code. For example, JavaScript would have read our code snippet above as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var car;\\n\\n// Outputs: undefined\\nconsole.log(car);\\n\\n// JavaScript sets our car variable afterwards\\ncar = 'Audi';\\n\")), mdx(\"p\", null, \"As you can see our variable car is declared at the top of our file with a value set to \\u201Cundefined\\u201D. Then once JavaScript gets to our variable it will reassign that variable to what we passed it.  \"), mdx(\"p\", null, \"You might be asking yourself, what about functions? Functions are hoisted as well, but with a catch. Unlike variables, functions actually hoist the whole function definition, but only if it\\u2019s a function declaration.  For function expressions, the variable itself is hoisted, but the actual function definition is not. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Outputs: 'slyderz.co'\\nsomeFunc() \\n\\nfunction someFunc() {\\n    return 'slyderz.co'\\n}\\n\\n\\n// Outputs: site is undefined\\nsite();\\n\\nvar site = function someFunc() {\\n    return 'slyderz.co'\\n}\\n\")), mdx(\"p\", null, \"That's all for now \\uD83D\\uDE04. \"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Understanding hoisting in JavaScript\",\"date\":\"2019-05-19\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`One problem new JavaScript developers face is understanding that variables and functions are ‚Äúhoisted‚Äù. While some developers intend for hoisting to happen, others are faced with unexpected results and don‚Äôt understand why. `}</p>\n    <p>{`First, what is hoisting? `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Outputs: undefined\nconsole.log(car);\nvar car = 'Audi';\n`}</code></pre>\n    <p>{`Hoisting by definition is to ‚Äúraise or lift‚Äù and that‚Äôs exactly what JavaScript does when it runs our code. For example, JavaScript would have read our code snippet above as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var car;\n\n// Outputs: undefined\nconsole.log(car);\n\n// JavaScript sets our car variable afterwards\ncar = 'Audi';\n`}</code></pre>\n    <p>{`As you can see our variable car is declared at the top of our file with a value set to ‚Äúundefined‚Äù. Then once JavaScript gets to our variable it will reassign that variable to what we passed it.  `}</p>\n    <p>{`You might be asking yourself, what about functions? Functions are hoisted as well, but with a catch. Unlike variables, functions actually hoist the whole function definition, but only if it‚Äôs a function declaration.  For function expressions, the variable itself is hoisted, but the actual function definition is not. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Outputs: 'slyderz.co'\nsomeFunc() \n\nfunction someFunc() {\n    return 'slyderz.co'\n}\n\n\n// Outputs: site is undefined\nsite();\n\nvar site = function someFunc() {\n    return 'slyderz.co'\n}\n`}</code></pre>\n    <p>{`That's all for now üòÑ. `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}